"use strict";(self.webpackChunkmobilecourse=self.webpackChunkmobilecourse||[]).push([[394],{8125:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var r=n(5893),s=n(1151);const o={title:"Networking",sidebar_position:2},i=void 0,a={id:"Networking/networking",title:"Networking",description:"In the following example, we utilize the GitHub API to search for repositories based on a keyword provided by the user. User can type a keyword and after pressing the button, we fetch the repositories matching the keyword and display them in a list.",source:"@site/docs/Networking/networking.md",sourceDirName:"Networking",slug:"/Networking/",permalink:"/mobilecourse/docs/Networking/",draft:!1,unlisted:!1,editUrl:"https://github.com/haagahelia/mobileprogramming.git/docs/Networking/networking.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Networking",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Basics",permalink:"/mobilecourse/docs/Networking/basics"},next:{title:"Environment variables",permalink:"/mobilecourse/docs/Networking/environmentvar"}},c={},d=[];function h(e){const t={a:"a",code:"code",img:"img",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"In the following example, we utilize the GitHub API to search for repositories based on a keyword provided by the user. User can type a keyword and after pressing the button, we fetch the repositories matching the keyword and display them in a list."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:n(7092).Z+"",width:"291",height:"597"})}),"\n",(0,r.jsx)(t.p,{children:"We need states to store data that we get from the response and for keyword that we use in the query parameter."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:"// Import useState hook function\r\nimport { useState } from 'react';\r\n\r\n// declare states\r\nconst [keyword, setKeyword] = useState('');\r\nconst [repositories, setRepositories] = useState([]);\n"})}),"\n",(0,r.jsxs)(t.p,{children:["The following URL is used to get repositories by keyword. Response contains an ",(0,r.jsx)(t.code,{children:"item"})," node that is an array of repository objects. We will display both the full name and description of each repository."]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://api.github.com/search/repositories?q=%7Bkeyword%7D",children:"https://api.github.com/search/repositories?q={keyword}"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:n(169).Z+"",width:"914",height:"504"})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"return"})," statement includes ",(0,r.jsx)(t.code,{children:"TextInput"})," and ",(0,r.jsx)(t.code,{children:"Button"})," components. The ",(0,r.jsx)(t.code,{children:"TextInput"})," component allows users to input a keyword and we store it in the ",(0,r.jsx)(t.code,{children:"keyword"})," state. The Button component triggers the execution of a fetch request when pressed."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-jsx",children:"return (\r\n  <View style={styles.container}>\r\n    <TextInput \r\n      style={{fontSize: 18, width: 200}} \r\n      placeholder='keyword' \r\n      value={keyword}\r\n      onChangeText={text => setKeyword(text)} \r\n    />\r\n    <Button title=\"Find\" onPress={handleFetch} />\r\n  </View>\r\n);\n"})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"handleFetch"})," function executes the request and gets a query parameter from the ",(0,r.jsx)(t.code,{children:"keyword"})," state. Result array is saved to the ",(0,r.jsx)(t.code,{children:"repositories"})," state from the response."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:'const handleFetch = () => {\r\n  fetch(`https://api.github.com/search/repositories?q=${keyword}`)\r\n  .then(response => {\r\n    if (!response.ok)\r\n      throw new Error("Error in fetch:" + response.statusText);\r\n      \r\n    return response.json()\r\n  })\r\n  .then(data => setRepositories(data.items))\r\n  .catch(err => console.error(err));    \r\n}\n'})}),"\n",(0,r.jsxs)(t.p,{children:["Next, we add ",(0,r.jsx)(t.code,{children:"FlatList"})," component to show response data in the ",(0,r.jsx)(t.code,{children:"return"})," statement. We display both the full name and description of the repositories."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-jsx",children:'return (\r\n  <View style={styles.container}>\r\n    <TextInput \r\n      style={{fontSize: 18, width: 200}} \r\n      placeholder=\'keyword\' \r\n      value={keyword}\r\n      onChangeText={text => setKeyword(text)} \r\n    />\r\n    <Button title="Find" onPress={handleFetch} />\r\n    // highlight-start\r\n    <FlatList\r\n      data={repositories} \r\n      keyExtractor={(item) => item.id}\r\n      renderItem={({item}) =>\r\n        <View>\r\n          <Text style={{fontSize: 18, fontWeight: "bold"}}>\r\n            {item.full_name}\r\n          </Text>\r\n          <Text style={{fontSize: 16 }}>\r\n            {item.description}\r\n          </Text>\r\n    \xa0 \xa0 </View>}\r\n    /> \r\n    // highlight-end\r\n  </View>\r\n);\n'})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"ActivityIndicator"})," component in React Native is a visual indicator that represents the progress of an operation (",(0,r.jsx)(t.a,{href:"https://reactnative.dev/docs/activityindicator",children:"https://reactnative.dev/docs/activityindicator"}),"). Next, we utilize that to show progress of fetch operation. First, we import the ",(0,r.jsx)(t.code,{children:"ActivityIndicator"})," component from React Native."]}),"\n",(0,r.jsxs)(t.p,{children:["We add a new state variable called ",(0,r.jsx)(t.code,{children:"loading"})," to track whether the fetch operation is in progress."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:"import { useState } from 'react';\r\nimport { StyleSheet, Text, View, Button, TextInput, \r\n          FlatList, StatusBar, ActivityIndicator } from 'react-native';\r\n\r\nexport default function App() {\r\n  const [keyword, setKeyword] = useState('');\r\n  const [repositories, setRepositories] = useState([]);\r\n  // highlight-next-line\r\n  const [loading, setLoading] = useState(false);\r\n // continue...\n"})}),"\n",(0,r.jsxs)(t.p,{children:["In the ",(0,r.jsx)(t.code,{children:"handleFetch"})," function, we set ",(0,r.jsx)(t.code,{children:"loading"})," state to ",(0,r.jsx)(t.code,{children:"true"})," before sending the request and set it back to ",(0,r.jsx)(t.code,{children:"false"})," after the request completes or encounters an error."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:'const handleFetch = () => {\r\n  // highlight-next-line\r\n  setLoading(true); // Set loading state to true before fetch\r\n    \r\n  fetch(`https://api.github.com/search/repositories?q=${keyword}`)\r\n  .then(response => {\r\n    // highlight-next-line\r\n    setLoading(false); // Set loading state to false after fetch\r\n      \r\n    if (!response.ok)\r\n      throw new Error("Error in fetch:" + response.statusText);\r\n      \r\n    return  response.json()\r\n  })\r\n  .then(data => setRepositories(data.items))\r\n  .catch(err => {\r\n    // highlight-next-line\r\n    setLoading(false); // Set loading state to false in case of error\r\n    console.error(err);\r\n  });    \r\n}\n'})}),"\n",(0,r.jsxs)(t.p,{children:["Finally, we use conditional rendering to display ",(0,r.jsx)(t.code,{children:"ActivityIndicator"})," component when the ",(0,r.jsx)(t.code,{children:"loading"})," state is ",(0,r.jsx)(t.code,{children:"true"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-jsx",children:' return (\r\n    <View style={styles.container}>\r\n      <StatusBar hidden={true} />\r\n      <TextInput style={{fontSize: 18, width: 200}} placeholder=\'keyword\' \r\n        onChangeText={text => setKeyword(text)} />\r\n      <Button title="Find" onPress={handleFetch} />\r\n      \r\n      {/* Display ActivityIndicator when loading is true */}\r\n      {loading && <ActivityIndicator size="large" />}\r\n      \r\n      <FlatList \r\n        style={{margin: "3%"}}\r\n        keyExtractor={item => item.id} \r\n        renderItem={({item}) => \r\n          <View>\r\n            <Text style={{fontSize: 18, fontWeight: "bold"}}>{item.full_name}</Text>\r\n            <Text style={{fontSize: 16 }}>{item.description}</Text>\r\n          </View>}\r\n        data={repositories} /> \r\n    </View>\r\n  );\r\n}\n'})})]})}function l(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},169:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/github1-11d6092eef8d69225ebd81d2e37fffa8.png"},7092:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/github2-a1d301cb0c26757e7e7feeb14d8ed215.png"},1151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>i});var r=n(7294);const s={},o=r.createContext(s);function i(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);