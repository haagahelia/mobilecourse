"use strict";(self.webpackChunkmobilecourse=self.webpackChunkmobilecourse||[]).push([[145],{2395:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var s=n(5893),i=n(1151);const o={title:"Styling",sidebar_position:5},c=void 0,r={id:"React Native/styling",title:"Styling",description:"Most of the core React Native components has a property called style that can be used for inline styling.",source:"@site/docs/React Native/styling.md",sourceDirName:"React Native",slug:"/React Native/styling",permalink:"/mobilecourse/docs/React Native/styling",draft:!1,unlisted:!1,editUrl:"https://github.com/haagahelia/mobileprogramming.git/docs/React Native/styling.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Styling",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Flatlist",permalink:"/mobilecourse/docs/React Native/flatlist"},next:{title:"React Native API",permalink:"/mobilecourse/docs/React Native/nativeapi"}},a={},l=[];function d(e){const t={code:"code",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["Most of the core React Native components has a property called ",(0,s.jsx)(t.code,{children:"style"})," that can be used for inline styling."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-html",children:"<Text style={{ fontSize:18, color: 'red' }}>Red text</Text>\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The better way is to use ",(0,s.jsx)(t.code,{children:"StyleSheet"})," component. Styles defined in StyleSheet can be reused across multiple components:"]}),"\n",(0,s.jsxs)(t.p,{children:["Import the ",(0,s.jsx)(t.code,{children:"StyleSheet"})," component:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:'import { StyleSheet, Text } from "react-native";\n'})}),"\n",(0,s.jsxs)(t.p,{children:["StyleSheet ",(0,s.jsx)(t.code,{children:"create"})," method creates a StyleSheet object, which groups styles together and assign each style a unique identifier:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:'const styles = StyleSheet.create({\n  alerttext: {\n    fontSize: 18,\n    color: "red",\n  },\n});\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Use styles in the component's ",(0,s.jsx)(t.code,{children:"style"})," attribute"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jsx",children:'<Text style="{styles.alerttext}">Red text</Text>\n'})})]})}function h(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>r,a:()=>c});var s=n(7294);const i={},o=s.createContext(i);function c(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);