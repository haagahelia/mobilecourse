"use strict";(self.webpackChunkmobilecourse=self.webpackChunkmobilecourse||[]).push([[677],{8799:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"Networking/networking","title":"Networking","description":"In the following example, we utilize the GitHub API to search for repositories based on a keyword provided by the user. User can type a keyword and after pressing the button, we fetch the repositories matching the keyword and display them in a list.","source":"@site/docs/Networking/networking.md","sourceDirName":"Networking","slug":"/Networking/","permalink":"/mobilecourse/docs/Networking/","draft":false,"unlisted":false,"editUrl":"https://github.com/haagahelia/mobileprogramming.git/docs/Networking/networking.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Networking","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Basics","permalink":"/mobilecourse/docs/Networking/basics"},"next":{"title":"Environment variables","permalink":"/mobilecourse/docs/Networking/environmentvar"}}');var i=n(4848),o=n(8453);const r={title:"Networking",sidebar_position:2},a=void 0,c={},d=[];function l(e){const t={a:"a",admonition:"admonition",code:"code",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"In the following example, we utilize the GitHub API to search for repositories based on a keyword provided by the user. User can type a keyword and after pressing the button, we fetch the repositories matching the keyword and display them in a list."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:n(4546).A+"",width:"291",height:"597"})}),"\n",(0,i.jsx)(t.p,{children:"We need states to store data that we get from the response and for keyword that we use in the query parameter."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"// Import useState hook function\nimport { useState } from 'react';\n\n// declare states\nconst [keyword, setKeyword] = useState('');\nconst [repositories, setRepositories] = useState([]);\n"})}),"\n",(0,i.jsxs)(t.p,{children:["The following URL is used to get repositories by keyword. Response contains an ",(0,i.jsx)(t.code,{children:"item"})," node that is an array of repository objects. We will display both the full name and description of each repository."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://api.github.com/search/repositories?q=%7Bkeyword%7D",children:"https://api.github.com/search/repositories?q={keyword}"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:n(5257).A+"",width:"914",height:"504"})}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"return"})," statement includes ",(0,i.jsx)(t.code,{children:"TextInput"})," and ",(0,i.jsx)(t.code,{children:"Button"})," components. The ",(0,i.jsx)(t.code,{children:"TextInput"})," component allows users to input a keyword and we store it in the ",(0,i.jsx)(t.code,{children:"keyword"})," state. The Button component triggers the execution of a fetch request when pressed."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-jsx",children:"return (\n  <View style={styles.container}>\n    <TextInput \n      style={{fontSize: 18, width: 200}} \n      placeholder='keyword' \n      value={keyword}\n      onChangeText={text => setKeyword(text)} \n    />\n    <Button title=\"Find\" onPress={handleFetch} />\n  </View>\n);\n"})}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"handleFetch"})," function executes the request and gets a query parameter from the ",(0,i.jsx)(t.code,{children:"keyword"})," state. Result array is saved to the ",(0,i.jsx)(t.code,{children:"repositories"})," state from the response."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:'const handleFetch = () => {\n  fetch(`https://api.github.com/search/repositories?q=${keyword}`)\n  .then(response => {\n    if (!response.ok)\n      throw new Error("Error in fetch:" + response.statusText);\n      \n    return response.json()\n  })\n  .then(data => setRepositories(data.items))\n  .catch(err => console.error(err));    \n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Next, we add ",(0,i.jsx)(t.code,{children:"FlatList"})," component to show response data in the ",(0,i.jsx)(t.code,{children:"return"})," statement. We display both the full name and description of the repositories."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-jsx",children:'return (\n  <View style={styles.container}>\n    <TextInput \n      style={{fontSize: 18, width: 200}} \n      placeholder=\'keyword\' \n      value={keyword}\n      onChangeText={text => setKeyword(text)} \n    />\n    <Button title="Find" onPress={handleFetch} />\n    // highlight-start\n    <FlatList\n      data={repositories} \n      keyExtractor={(item) => item.id}\n      renderItem={({item}) =>\n        <View>\n          <Text style={{fontSize: 18, fontWeight: "bold"}}>\n            {item.full_name}\n          </Text>\n          <Text style={{fontSize: 16 }}>\n            {item.description}\n          </Text>\n    \xa0 \xa0 </View>}\n    /> \n    // highlight-end\n  </View>\n);\n'})}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"ActivityIndicator"})," component in React Native is a visual indicator that represents the progress of an operation (",(0,i.jsx)(t.a,{href:"https://reactnative.dev/docs/activityindicator",children:"https://reactnative.dev/docs/activityindicator"}),"). Next, we utilize that to show progress of fetch operation. First, we import the ",(0,i.jsx)(t.code,{children:"ActivityIndicator"})," component from React Native."]}),"\n",(0,i.jsxs)(t.p,{children:["We add a new state variable called ",(0,i.jsx)(t.code,{children:"loading"})," to track whether the fetch operation is in progress."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"import { useState } from 'react';\nimport { StyleSheet, Text, View, Button, TextInput, \n          FlatList, StatusBar, ActivityIndicator } from 'react-native';\n\nexport default function App() {\n  const [keyword, setKeyword] = useState('');\n  const [repositories, setRepositories] = useState([]);\n  // highlight-next-line\n  const [loading, setLoading] = useState(false);\n // continue...\n"})}),"\n",(0,i.jsxs)(t.p,{children:["In the ",(0,i.jsx)(t.code,{children:"handleFetch"})," function, we set ",(0,i.jsx)(t.code,{children:"loading"})," state to ",(0,i.jsx)(t.code,{children:"true"})," before sending the request and set it back to ",(0,i.jsx)(t.code,{children:"false"})," after the request completes or encounters an error."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:'const handleFetch = () => {\n  // highlight-next-line\n  setLoading(true); // Set loading state to true before fetch\n    \n  fetch(`https://api.github.com/search/repositories?q=${keyword}`)\n  .then(response => {    \n    if (!response.ok)\n      throw new Error("Error in fetch:" + response.statusText);\n      \n    return  response.json()\n  })\n  .then(data => setRepositories(data.items))\n  .catch(err => console.error(err))\n  // highlight-next-line\n  .finally(() => setLoading(false)); // Set loading state to false   \n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Finally, we use conditional rendering to display ",(0,i.jsx)(t.code,{children:"ActivityIndicator"})," component when the ",(0,i.jsx)(t.code,{children:"loading"})," state is ",(0,i.jsx)(t.code,{children:"true"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-jsx",children:' return (\n    <View style={styles.container}>\n      <StatusBar hidden={true} />\n      <TextInput style={{fontSize: 18, width: 200}} placeholder=\'keyword\' \n        onChangeText={text => setKeyword(text)} />\n      <Button title="Find" onPress={handleFetch} />\n      \n      {/* Display ActivityIndicator when loading is true */}\n      {loading && <ActivityIndicator size="large" />}\n      \n      <FlatList \n        style={{margin: "3%"}}\n        keyExtractor={item => item.id} \n        renderItem={({item}) => \n          <View>\n            <Text style={{fontSize: 18, fontWeight: "bold"}}>{item.full_name}</Text>\n            <Text style={{fontSize: 16 }}>{item.description}</Text>\n          </View>}\n        data={repositories} /> \n    </View>\n  );\n}\n'})}),"\n",(0,i.jsxs)(t.admonition,{title:"Task",type:"info",children:[(0,i.jsx)(t.p,{children:"Refactor the GitHub API app by splitting it into smaller, more manageable components. Specifically:"}),(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Create a separate component for the list that displays repositories."}),"\n",(0,i.jsx)(t.li,{children:"Create a separate file for the REST API calls."}),"\n",(0,i.jsxs)(t.li,{children:["Read the next section about environment variables and configure the API URL to be read from a ",(0,i.jsx)(t.code,{children:".env"})," file."]}),"\n"]})]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},5257:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/github1-11d6092eef8d69225ebd81d2e37fffa8.png"},4546:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/github2-a1d301cb0c26757e7e7feeb14d8ed215.png"},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var s=n(6540);const i={},o=s.createContext(i);function r(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);